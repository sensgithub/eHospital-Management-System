name: DevSecOps Pipeline for PHP w/ Composer

on:
  push:
    branches: ["main" ]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: sens31/ehospital
  GITHUB_REPO: sensgithub/eHospital-Management-System
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  
permissions:
  contents: read

jobs:
  security:
  
    permissions:
      contents: read 
      security-events: write 
      actions: read 
      
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Snyk CLI
        run: curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - && sudo apt-get install -y nodejs && sudo npm install -g snyk
            
      - name: Authenticate with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        
      - name: Set up Snyk CLI to check for security issues
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
          
      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif || true

        # Build the docker image for testing
      - name: Build a Docker image
        run: docker build -t sens31/ehospital .
        
        # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.      
      - name: Snyk Container monitor
        run: snyk container monitor sens31/ehospital --file=Dockerfile

       # Push the Snyk Code results into GitHub Code Scanning tab 
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-code.sarif
          
  test:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - uses: actions/checkout@v3

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress
        
        
  build:
  
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        env:
          DOCKER_BUILDKIT: 1
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest
  
  import:
    runs-on: ubuntu-latest
    needs: build
    
    services:
      mysql:
        # https://hub.docker.com/_/mysql
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test
        ports:
          - 33306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Import MySQL file
      env:
        SQL: |
          SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
          SET AUTOCOMMIT = 0;
          START TRANSACTION;
          SET time_zone = "+00:00";
          DROP TABLE IF EXISTS `admin`;
          CREATE TABLE IF NOT EXISTS `admin` (
          `admin_email` varchar(255) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL,
          `admin_password` varchar(255) CHARACTER SET latin1 COLLATE latin1_general_ci DEFAULT NULL,
          PRIMARY KEY (`admin_email`)
          ) ENGINE=MyISAM DEFAULT CHARSET=latin1;
          INSERT INTO `admin` (`admin_email`, `admin_password`) VALUES
          ('admin@ehospital.bg', 'admin123');
          CREATE TABLE IF NOT EXISTS `appointment` (
          `appointment_id` int(11) NOT NULL AUTO_INCREMENT,
          `patient_id` int(10) DEFAULT NULL,
          `appointment_num` int(3) DEFAULT NULL,
          `schedule_id` int(10) DEFAULT NULL,
          `appointment_date` date DEFAULT NULL,
          PRIMARY KEY (`appointment_id`),
          KEY `patient_id` (`patient_id`),
          KEY `schedule_id` (`schedule_id`)
          ) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
          INSERT INTO `appointment` (`appointment_id`, `patient_id`, `appointment_num`, `schedule_id`, `appointment_date`) VALUES
          (1, 1, 1, 1, '20-03-2023');
          DROP TABLE IF EXISTS `doctor`;
          CREATE TABLE IF NOT EXISTS `doctor` (
          `doctor_id` int(11) NOT NULL AUTO_INCREMENT,
          `doctor_email` varchar(50) DEFAULT NULL,
          `doctor_name` varchar(25) DEFAULT NULL,
          `doctor_password` varchar(25) DEFAULT NULL,
          `doctor_tel` varchar(15) DEFAULT NULL,
          `specialties` int(2) DEFAULT NULL,
          PRIMARY KEY (`doctor_id`),
          KEY `specialties` (`specialties`)
          ) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
          INSERT INTO `doctor` (`doctor_id`, `doctor_email`, `doctor_name`, `doctor_password`, `doctor_tel`, `specialties`) VALUES
          (1, 'velislav_stoyanov@ehospital.bg', 'Velislav Stoyanov', '111654161', '0898314551', 5);
          INSERT INTO `doctor` (`doctor_id`, `doctor_email`, `doctor_name`, `doctor_password`, `doctor_tel`, `specialties`) VALUES
          (2, 'veselin_mladenov@ehospital.bg', 'Veselin Mladenov', '651145611', '0874117654', 8);
          INSERT INTO `doctor` (`doctor_id`, `doctor_email`, `doctor_name`, `doctor_password`, `doctor_tel`, `specialties`) VALUES
          (3, 'toni_hristova@ehospital.bg', 'Antoaneta Hristova', '145641634', '0981116721', 16);
          INSERT INTO `doctor` (`doctor_id`, `doctor_email`, `doctor_name`, `doctor_password`, `doctor_tel`, `specialties`) VALUES
          (4, 'dobrin_ignatov@ehospital.bg', 'Dobrin Ignatov', '456213453', '0876789090', 14);
      run: |
        mysql --host 127.0.0.1 --port 33306 -uroot -ppassword -e "SHOW DATABASES LIKE 'ehospital';" 2>/dev/null
        echo "$SQL" > person.sql
        echo "--- SQL ---"
        cat ehospital.sql
        echo "--- --- ---"
        echo "Importing from ehospita.sql file"
        mysql --host 127.0.0.1 --port 33306 -uroot -ppassword ehospital < ehospital.sql 2>/dev/null
        echo "Checking the imported data"
        mysql --host 127.0.0.1 --port 33306 -uroot -ppassword ehospital <<< 'SELECT * from doctor' 2>/dev/null
